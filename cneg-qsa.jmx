<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true"/>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="test path" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value">http://www.opengis.net/def/docs/09-146r2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Cache-Control</stringProp>
              <stringProp name="Header.value">no-cache</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">log.info vars.get(&quot;path&quot;)
input =vars.get(&quot;path&quot;)
URI ulrString = new URI(input)
vars.put(&quot;gProtocol&quot;,ulrString.getScheme().toString())
vars.put(&quot;gHost&quot;,ulrString.getHost().toString())
vars.put(&quot;gPort&quot;,ulrString.getPort().toString())
vars.put(&quot;gPathUrl&quot;,ulrString.getPath().toString())
log.info vars.get(&quot;gPathUrl&quot;)</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="QSA: Get alternates view ${path}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_profile" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">alt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_profile</stringProp>
              </elementProp>
              <elementProp name="_mediatype" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">application/ld+json</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_mediatype</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${gHost}</stringProp>
          <stringProp name="HTTPSampler.port">${gPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${gProtocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${gPathUrl}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check response includes Content-Profile" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1396532539">Content-Profile:</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">QSA must deliver a response using the canonical profile requested - first check it declares </stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check response declares correct  Content-Profile" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="818356244">Content-Profile:.*&lt;http://www.w3.org/ns/dx/conneg/altr&gt;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">QSA must deliver a response using the canonical profile requested -</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JMESPathExtractor guiclass="JMESPathExtractorGui" testclass="JMESPathExtractor" testname="getbody" enabled="false">
            <stringProp name="JMESExtractor.referenceName">json</stringProp>
            <stringProp name="JMESExtractor.jmesPathExpr">[*]</stringProp>
            <stringProp name="JMESExtractor.matchNumber">1</stringProp>
            <stringProp name="JMESExtractor.defaultValue">Failed to parse json</stringProp>
          </JMESPathExtractor>
          <hashTree/>
          <JMESPathExtractor guiclass="JMESPathExtractorGui" testclass="JMESPathExtractor" testname="getview" enabled="false">
            <stringProp name="JMESExtractor.referenceName">viewlist</stringProp>
            <stringProp name="JMESExtractor.jmesPathExpr">[&apos;http://www.w3.org/ns/dx/conneg/altr#hasRepresentation&apos;]..[&apos;@id&apos;]</stringProp>
            <stringProp name="JMESExtractor.matchNumber">-1</stringProp>
            <stringProp name="JMESExtractor.defaultValue">No profile found</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">json</stringProp>
          </JMESPathExtractor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get JSON" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">json</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Scope.variable"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Failed to parse json</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract views" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">viewlist</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[&apos;http://www.w3.org/ns/dx/conneg/altr#hasRepresentation&apos;]..[&apos;@id&apos;]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">json</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Profile not found</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="extract global profiles" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">proflist</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.[&apos;@type&apos;][0] == &apos;http://www.w3.org/ns/prof/Profile&apos; || @.[&apos;@type&apos;] == &apos;http://www.w3.org/ns/prof/Profile&apos;)]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">json</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Global profile not found</stringProp>
            <stringProp name="TestPlan.comments">Extract tokens attached to profiles, not specific representations</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check response is valid json" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="123127415">Failed to parse json</stringProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">QSA must deliver a response using the canonical profile requested - first check it declares </stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">12</intProp>
          <stringProp name="Assertion.scope">variable</stringProp>
          <stringProp name="Scope.variable">json</stringProp>
          <stringProp name="Assertion.custom_message"></stringProp>
        </ResponseAssertion>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check response contains profile list" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="1434153548">No profile found</stringProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">At least one profile must be declared</stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">12</intProp>
          <stringProp name="Assertion.scope">variable</stringProp>
          <stringProp name="Scope.variable">viewlist</stringProp>
          <stringProp name="Assertion.custom_message"></stringProp>
        </ResponseAssertion>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Profile map tokens to URI" enabled="true">
          <stringProp name="ForeachController.inputVal">proflist</stringProp>
          <stringProp name="ForeachController.returnVal">profmeta</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="gettoken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">proftoken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[&apos;http://www.w3.org/ns/prof/token&apos;]..[&apos;@value&apos;]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">profmeta</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Global profile not found</stringProp>
            <stringProp name="TestPlan.comments">Extract tokens attached to profiles, not specific representations</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="getURI" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">profuri</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$[&apos;@id&apos;]</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">profmeta</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">Global profile not found</stringProp>
            <stringProp name="TestPlan.comments">Extract tokens attached to profiles, not specific representations</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save uri-token mapping ${proftoken} -&gt; ${profuri} " enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">Map map = null;    
 if (bsh.shared.map == void) {
    map = new HashMap();        
}
else {
    map = bsh.shared.map;        
}

map.put(vars.get(&quot;profuri&quot;),vars.get(&quot;proftoken&quot;));
bsh.shared.map = map;

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="test" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="dump global profile tokens" enabled="false">
          <stringProp name="BeanShellSampler.query">Map map = bsh.shared.map;

Iterator iterator = map.entrySet().iterator();

while (iterator.hasNext()) {
        Map.Entry pair = (Map.Entry)iterator.next();
        String uri = pair.getKey();
        String token = pair.getValue();
        //do what you need to do with the values from the HashMap   
        print( uri + &quot; --&gt; &quot; +  token) ;       
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">viewlist</stringProp>
          <stringProp name="ForeachController.returnVal">view</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="**** Representation: ${view}" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get representation node ${view}" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">repnode</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$[?(@.[&apos;@id&apos;] == &apos;${view}&apos;)]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">json</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">failed to find representation node</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert representation found" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149133520">failed to find representation node</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">repnode</stringProp>
              <stringProp name="Assertion.custom_message">Failed to locate representation node for ${view}</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get format array" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mimelist</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[&apos;http://purl.org/dc/terms/format&apos;]..[&apos;@value&apos;]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">repnode</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Failed to find format list</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert mimetypes supported found" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-218467838">Failed to find format list</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">mimelist</stringProp>
              <stringProp name="Assertion.custom_message">Failed to find supported mimetypes for ${view}</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get view conformance" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">viewprof</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[&apos;http://purl.org/dc/terms/conformsTo&apos;]..[&apos;@id&apos;]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">repnode</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NoProfile</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="get viewname" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">viewname</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[&apos;http://www.w3.org/ns/prof/token&apos;]..[&apos;@value&apos;]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable">repnode</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">Failed to locate view token</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Use global prof token or uri" enabled="true">
              <stringProp name="TestPlan.comments">check if global profile defines token if no explicit token for representation</stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">Map map = bsh.shared.map;


if( &quot;Failed to locate view token&quot;.equals(vars.get(&quot;viewname&quot;) )
	&amp;&amp; 
	(vars.get(&quot;viewprof&quot; ) != null ) )
{
	//print(  &quot; --&gt; &quot; + map.get(vars.get(&quot;viewprof&quot; ) ));
	if ( map.get( vars.get(&quot;viewprof&quot; ) ) != null  ) 
	{
		// use token bound to global profile description 
		vars.put(&quot;viewname&quot;, map.get( vars.get(&quot;viewprof&quot; ) ) ) ;
	} else
	{
		// default to using the profile URI as the token 
		vars.put(&quot;viewname&quot;, vars.get(&quot;viewprof&quot; ) ) ;
	}
}
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion view token found" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="522936266">Failed to locate view token</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">viewname</stringProp>
              <stringProp name="Assertion.custom_message">Failed to find QSA token</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler ${view}" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">mimelist</stringProp>
            <stringProp name="ForeachController.returnVal">mime</stringProp>
            <boolProp name="ForeachController.useSeparator">true</boolProp>
          </ForeachController>
          <hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="  Check for equivalent mimetypes ${mime}" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="    - ${path}?_profile=${viewname}&amp;_mediatype=${__urlencode(${mime})}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}?_profile=${viewname}&amp;_mediatype=${__urlencode(${mime})}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">switch ( vars.get(&quot;mime&quot;) ) {
	case &quot;application/rdf+ttl&quot; :
	 	vars.put(&quot;altmime&quot;, &quot;text/turtle&quot;) ;
	 	break;
	case &quot;text/turtle&quot; :
	 	vars.put(&quot;altmime&quot;, &quot;application/rdf+ttl&quot;) ;
	 	break;
	 case &quot;application/ld+json&quot; :
	 	vars.put(&quot;altmime&quot;, &quot;application/json&quot;) ;
	 	break;
	case &quot;application/json&quot; :
	 	vars.put(&quot;altmime&quot;, &quot;application/ld+json&quot;) ;
	 	break;
	default: 
		vars.put(&quot;altmime&quot;, vars.get(&quot;mime&quot;)) ;
}</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check 200 response" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1537176">200
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">40</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check response matches mime type ${mime} (or ${altmime} )" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1632051746">Content-Type: ${mime}</stringProp>
                  <stringProp name="2007153547">Content-Type: ${altmime}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Only check item scope (i.e. not featurescope=set)  with ful path" enabled="false">
            <stringProp name="IfController.condition">${__jexl3(&quot;${featurescope}&quot; != &quot;set&quot; )}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
